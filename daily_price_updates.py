# daily_price_updates.py

# Imports
import os
import sys
import psycopg2
import pandas as pd
import pandas_market_calendars as mcal
import alpaca_trade_api as tradeapi

from alpaca_trade_api.rest import TimeFrame
from datetime import date
from datetime import timedelta
from datetime import datetime as dt
from dotenv import load_dotenv

# Set environment variables
load_dotenv()

# Postgres
db_host = os.getenv('UW_SEC_MASTER_HOST')
db_user = os.getenv('UW_SEC_MASTER_USER')
db_pass = os.getenv('UW_SEC_MASTER_PASSWORD')

# Alpaca
ALPACA_API_KEY = os.getenv('ALPACA_API_KEY')
ALPACA_SECRET_KEY = os.getenv('ALPACA_SECRET_KEY')


def get_tickers_from_daily_price(connection):
    """Get a list of tickers with historic data in the
    daily_price table of the Securities Master database.

    Parameters
    ----------
    connection : 'psycopg2.extensions.connection'

    Returns
    -------
    'list'
        The list of tuples consisting of the ticker symbols and indicies
        from the daily_price table in Securities Master database
    """

    # Obtain list of tickers in daily_price.
    ticker_query = """SELECT DISTINCT dp.symbol_id, s.ticker
    FROM daily_price AS dp
    JOIN symbol AS s ON dp.symbol_id = s.id
    ORDER BY dp.symbol_id"""

    # Query the database.
    cur = connection.cursor()
    cur.execute(ticker_query)
    connection.commit()
    tickers = cur.fetchall()
    cur.close()

    return [(ticker[0], ticker[1]) for ticker in tickers]


def format_dataframe(price_data_df, ticker_id):
    """Convert the format of the price data DataFrame obtained
    from Alpaca to match the schema of the daily_price table.

    Parameters
    ----------
    price_data_df : 'pandas.DataFrame'
        The dataframe of price data generated by Alpaca
    ticker_id : 'int'
        The ticker's id from the symbol table, e.g. 13

    Returns
    -------
    'pandas.DataFrame'
        A dataframe of the price data that matches the schema
        of the daily_price table
    """
    # Convert DataFrame to daily_price schema
    price_data_df.drop(['trade_count', 'vwap'], axis=1, inplace=True)

    price_data_df.index = price_data_df.index.date
    price_data_df.reset_index(inplace=True)
    price_data_df.rename(
        {
            'index': 'price_date',
            'open': 'open_price',
            'high': 'high_price',
            'low': 'low_price',
            'close': 'close_price'
        },
        axis=1,
        inplace=True
    )

    # Create a DataFrame with the additional columns to be added
    additional_cols_df = pd.DataFrame({
        'data_vendor_id': [1],
        'symbol_id': [ticker_id],
        'created_date': [dt.now()],
        'last_updated': [dt.now()]
    })

    # Concatenate dataframes.
    sorted_cols = [
        'data_vendor_id',
        'symbol_id',
        'price_date',
        'created_date',
        'last_updated',
        'open_price',
        'high_price',
        'low_price',
        'close_price',
        'volume'
    ]
    insert_df = pd.concat([price_data_df, additional_cols_df], axis=1)
    insert_df = insert_df[sorted_cols]

    return insert_df


def get_prior_day_price_data(ticker, date):
    """Get the prrior day's price data from Alpaca.

    Parameters
    ----------
    ticker : 'tuple'
        The id and ticker symbol, e.g. (23, 'AAPL')
    date : 'datetime.date'
        The prior day's date

    Returns
    -------
    'pandas.DataFrame'
        A dataframe of the prior day's price data that
        matches the schema of the daily_price table
    """

    # Create the Alpaca API object.
    alpaca = tradeapi.REST(
        ALPACA_API_KEY,
        ALPACA_SECRET_KEY,
        api_version='v2'
    )

    # Get the prior days price data as
    # a pandas dataframe.
    yesterday = date.today() - timedelta(days=2)
    price_data_df = alpaca.get_bars(
        ticker[1],
        TimeFrame.Day,
        start=yesterday,
        end=yesterday
    ).df

    return format_dataframe(price_data_df, ticker[0])
